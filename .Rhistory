plot(E$condition,E$distracters)
plot(E$condition,E$T)
plot(E$condition,E$T,E$distracters)
plot(y=E$T,x=E$distracters)
plot(y=E$T,x=E$distracters, xlab="Distracters",ylab="Time(s)")
plot(y=E$T,x=E$distracters, xlab="Distracters",ylab="Time(s)",type="l")
plot(y=E$T,x=E$distracters, xlab="Distracters",ylab="Time(s)",type="l")
plot(y=E$T,x=E$distracters, xlab="Distracters",ylab="Time(s)",type="n")
library(ggplot2)
plot(y=E$T,x=E$distracters)
library(ggplot2)
plot(y=E$T,x=E$distracters, xlab="Distracters",ylab="Time(s)",type="n")
plot(y=E$T,x=E$distracters,type="n", xlab="Distracters",ylab="Time(s)")
range(E$T)
yrange <- range(E$T)
xrange <- range(E$distracters)
plot(xrange,yrange,type="n", xlab="Distracters",ylab="Time(s)")
yrange <- range(E$T)
#xrange <- range(E$distracters)
plot(2,yrange,type="n", xlab="Distracters",ylab="Time(s)")
test <- "This is a test sentence"
strsplit(test," ")
test_split <- strsplit(test," ")
test_split
plot(test_split)
hard_absent <- hard_present <- ""
easy_absent <- easy_present <- ""
E[1,]
E[2,]
curr_entry <- ""
curr_entry <- E[1,]
curr_entry
curr_entry$condition
curr_entry$T
easy_absent <- c(easy_absent,curr_entry)
easy_absent
curr_entry<-E[3,]
easy_absent <- c(easy_absent,curr_entry)
easy_absent
hard_absent <- hard_present <- data.frame(distracters=character(),target=character(),condition=character(),T=double())
View(hard_absent)
easy_absent <- easy_present <-hard_absent <- hard_present <- data.frame(distracters=character(),target=character(),condition=character(),T=double())
easy_absent <- c(easy_absent,curr_entry)
easy_absent <- easy_present <-hard_absent <- hard_present <- data.frame(distracters=character(),target=character(),condition=character(),T=double())
rbind(easy_absent,E[1,]
)
View(easy_absent)
rbind(easy_absent,E[2:3,])
easy_absent
easy_absent <- rbind(easy_absent,E[2:3,])
View(easy_absent)
easy_absent <- easy_present <-hard_absent <- hard_present <- data.frame(distracters=character(),target=character(),condition=character(),T=double())
curr_entry <- ""
for (i in 1:240) {
curr_entry <- E[i,]
if (curr_entry$condition == "easy" && curr_entry$target=="present") {
easy_present <- rbind(easy_present,E[i,])
} else if (curr_entry$condition == "easy" && curr_entry$target=="absent") {
easy_absent <- rbind(easy_absent,E[i,])
} else if (curr_entry$condition == "hard" && curr_entry$target=="absent") {
hard_absent <- rbind(hard_absent,E[i,])
} else if (curr_entry$condition == "hard" && curr_entry$target=="present") {
hard_present <- rbind(hard_present,E[i,])
} else {
print("shouldn't happen")
}
}
View(easy_absent)
View(easy_present)
View(hard_absent)
plot(2,range(E$T),type="n", xlab="Number of Distracters",ylab="Time(s)")
plotlinegraph(2,range(E$T),type="n", xlab="Number of Distracters",ylab="Time(s)")
plot(easy_absent$condition,easy_absent$T)
plot(easy_absent$condition,easy_absent$T,type="l")
dev.off()
plot(easy_absent$condition,easy_absent$T,type="l")
M <- matrix(data = easy_absent)
View(M)
M <- matrix(c(easy_absent$distracters,easy_absent$T),nrow = 60, ncol = 2)
View(M)
plot(M)
plot(M,type = "l")
M[1,]
View(M)
M[,1]
M[,2]
M[,]
plot(easy_absent)
yrange <- range(E$T)
xrange <- range(1:2)
plotlinegraph(xrange,yrange,type="n", xlab="Number of Distracters",ylab="Time(s)")
yrange <- range(E$T)
xrange <- range(1:2)
plot(xrange,yrange,type="n", xlab="Number of Distracters",ylab="Time(s)")
lines(y = easy_absent$T,x = easy_absent$distracters)
lines(x=M[,1],y=M[,2])
dev.off()
yrange <- range(E$T)
xrange <- range(1:2)
plot(xrange,yrange,type="n", xlab="Number of Distracters",ylab="Time(s)")
lines(x=M[,1],y=M[,2])
yrange <- range(M[,2])
xrange <- range(1:2)
plot(xrange,yrange,type="n", xlab="Number of Distracters",ylab="Time(s)")
lines(x=M[,1],y=M[,2])
mean(M[,2])
lines(x=M[,1],y=mean(M[,2]))
dev.off()
yrange <- range(M[,2])
xrange <- range(1:2)
plot(xrange,yrange,type="n", xlab="Number of Distracters",ylab="Time(s)")
lines(x=M[,1],y=M[,2])
M <- matrix(c(easy_absent$distracters,easy_absent$T),nrow = 60, ncol = 2)
lines(x=M[,1],y=mean(M[,2]))
plot(mean(M[,2]))
plot(x=easy_absent$distracters,y=mean(easy_absent$T))
points(x = easy_present$distracters, y=mean(easy_present$T))
yrange <- range(M[,2])
xrange <- range(1:2)
plot(xrange,yrange,type="n", xlab="Number of Distracters",ylab="Time(s)")
setwd("~/Documents/BPA_R/GithubFiles/PowerApps")
library(ggmap)
#Read in all of the csv data files
get_csvdata_droploads <- function(){
buses <<- read.csv("data/rawdata/BPA_230kV_data/buses.csv")
substations <<- read.csv("data/rawdata/BPA_230kV_data/subs.csv")
bus_info <<- read.csv("data/rawdata/BPA_230kV_data/bus_info.csv")
pmus <<- read.csv("data/rawdata/BPA_230kV_data/pmu_buses.csv")
gens <<- read.csv("data/rawdata/BPA_230kV_data/gens.csv")
Freq <<- read.csv("data/rawdata/BPA_230kV_data/weccbpaabove230_drop_load_pmu_freq.csv")
Pangle <<- read.csv("data/rawdata/BPA_230kV_data/weccbpaabove230_drop_load_pmu_vang.csv")
Volt <<- read.csv("data/rawdata/BPA_230kV_data/weccbpaabove230_drop_load_pmu_vmag.csv")
}
#Change up the names so that they all match
clean_names_droploads  <- function(){
fn <- colnames(Freq)
fn <- gsub("X","",fn)
#  fn <- gsub("[.]Frequency","",fn)
colnames(Freq) <<- fn
pn <- colnames(Pangle)
pn <- gsub("X","",pn)
#pn <- gsub("[.]V[.]angle","",pn)
colnames(Pangle) <<- pn
vn <- colnames(Volt)
vn  <- gsub("X","",vn)
#  vn  <- gsub("[.]V[.]pu","",vn)
colnames(Volt) <<- vn
bus_locs <<- data.frame()
}
#Create all of the merged data frames that will be used by the plotting functions
get_merged_data_droploads  <- function(){
# sub_buses <<- merge(buses,substations,by = c("Sub.ID","Sub.Name"))
bus_locs_full <<- data.frame(pmus$Bus.Number,pmus$Bus.Name,pmus$Sub.Name,pmus$Latitude,pmus$Longitude,"Frequency","Voltage","Angle")
colnames(bus_locs_full) <<- c("Bus.Name","Bus.Name.unused","Sub.Name", "Latitude","Longitude","Frequency","Voltage","Angle")
bus_locs_full$Frequency <<- 0
bus_locs_full$Voltage <<- 0
bus_locs_full$Angle <<- 0
#Remove buses with no long/lat coordinates
bus_locs_full<<-bus_locs_full[!(bus_locs_full$Latitude=="" | bus_locs_full$Longitude=="" | is.na(bus_locs_full$Latitude) | is.na(bus_locs_full$Longitude)),]
bus_locs_full$Longitude <<- as.numeric(as.character(bus_locs_full$Longitude))
bus_locs_full$Latitude <<- as.numeric(as.character(bus_locs_full$Latitude))
# missing_pmu <- colnames(Volt)[!colnames(Volt) %in% bus_locs_full$Bus.Num][-1]
#bus_locs contains just the buses that have PMU readings
#bus_locs <<- bus_locs_full[bus_locs_full$Bus.Num %in% pmus$Bus.Number,]
bus_locs <<- bus_locs_full[bus_locs_full$Bus.Name %in% colnames(Freq),]
bus_locs$Longitude <<- as.numeric(as.character(bus_locs$Longitude))
bus_locs$Latitude <<- as.numeric(as.character(bus_locs$Latitude))
}
#Create the map and ggmap to be used by the plot functions (the map ones at least)
get_map_data_droploads  <- function(){
#Create the map to use as the background for the ggplot
mapten <<- get_map(location = c(lon = mean(bus_locs$Longitude), lat = mean(bus_locs$Latitude)), zoom = 4, source = "stamen",maptype = "toner", scale = 2)
#maplocs <<- get_map(location = c(min(bus_locs$Longitude), min(bus_locs$Latitude),
#                                 max(bus_locs$Longitude),max(bus_locs$Latitude)),
#                     maptype = "roadmap")
map_lims <<- c(-124, -104,31, 50) #xmin,xmax,ymin,ymax
m_ratio <<- abs(map_lims[2]-map_lims[1])/abs(map_lims[4]-map_lims[3])
g <<- ggmap(mapten) +
# coord_fixed(xlim = c(map_lims[1], map_lims[2]),ylim = c(map_lims[3], map_lims[4]),expand = FALSE)
scale_x_continuous(limits = c(-124, -104), expand = c(0, 0)) +
scale_y_continuous(limits = c(31, 50), expand = c(0, 0))
}
#Call all the functions in order
import_data <- function(){
get_csvdata_droploads()
clean_names_droploads()
get_merged_data_droploads()
get_map_data_droploads()
}
#Name of the data set
name <- function(){
n <- "Dropped Load"
n
}
#How many time points is the data
nsamples <- function(){
nrow(Freq)
}
#Returns a list of the plots that this data can be used to create
use_plots <- function(){
list('linear.R','map.R','heatmap.R','bar.R','histogram.R')
}
import_data()
mapten
source("plots/map.R")
plot_mapfreq(100)
source("data/import_droploads.R")
import_data()
plot_mapfreq(100)
plot_mapfreq(1000)
plot_mapfreq(1500)
source("plots/bar.R")
plot_barvolt(1000)
library(spec)
install.packages("spec")
spectrum(Freq[-1,100])
spectrum(Freq)
name()
source("data/import_icestorm.R")
spectrum(Freq)
spectrum(Freq[-1,])
spectrum(Freq[-1,1000])
spectrum(Freq[,1000])
spectrum(Freq[1000])
spectrum(Freq[100])
spectrum(Freq[500])
spectrum(Freq[,500])
spectrum(Freq[1,500])
spectrum(Freq[2,500])
spectrum(Freq[-1,500])
spectrum(Freq[-1,1:100])
spectrum(Freq[-1,1:500])
spectrum(Freq[-1,100:500])
spectrum(Freq[,100:500])
View(Freq)
spectrum(Freq[-1,1:500])
spectrum(Freq[-1,1:100])
spectrum(Volt[-1,1:100])
spectrum(Volt[-1,1:1000])
help("spectrum")
ts(Freq)
ts(Volt)
spectrum(Volt)
spectrum(Volt[1])
spectrum(Volt[,20])
spectrum(Volt[,200])
unique(Volt[,200])
unique(Volt[-1,200])
name()
Volt[-1,200]
View(Volt)
Volt[,200]
Volt[,2]
Volt[200,]
spectrum(Volt[,-1])
spectrum(Volt[100,-1])
spectrum(Volt[1:2,-1])
spectrum(as.vector(Volt[100,-1]))
spectrum(Volt[100,-1])
spectrum(Volt[100,])
Volt[100,]
Volt[1,]
spectrum(Volt[1,])
spectrum(Volt[1,-1])
spectrum(as.vector(Volt[1,-1]))
spectrum(Volt[1:126,-1])
spectrum(Volt[126,-1])
spectrum(Volt[126,])
spectrum(Volt[100,])
spectrum(Volt[100,-1])
spectrum(Volt[1,-1])
spectrum(Volt[1000,-1])
spectrum(Volt[1200,-1])
library(animation)
make_bar_videos <- function(data_path){
source(data_path)
source("plots/bar.R")
import_data()
data_name <- gsub("[ ]","_",name())
start <- 1
stop <- nsamples()
vid_name <- paste(data_name,"barfreq",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_barfreq(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
vid_name <- paste(data_name,"barvolt",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_barvolt(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
vid_name <- paste(data_name,"barangle",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_barpangle(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
}
make_hist_videos <- function(data_path){
source(data_path)
source("plots/histogram.R")
import_data()
data_name <- gsub("[ ]","_",name())
start <- 1
stop <- nsamples()
vid_name <- paste(data_name,"histfreq",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_histfreq(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
vid_name <- paste(data_name,"histvolt",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_histvolt(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
vid_name <- paste(data_name,"histangle",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_histpangle(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
}
make_map_videos <- function(data_path){
source(data_path)
source("plots/map.R")
import_data()
data_name <- gsub("[ ]","_",name())
start <- 1
stop <- nsamples()
vid_name <- paste(data_name,"mapfreq",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_mapfreq(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
vid_name <- paste(data_name,"mapvolt",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_mapvolt(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
vid_name <- paste(data_name,"mapangle",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_mapangle(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
}
make_heat_videos <- function(data_path){
source(data_path)
source("plots/heatmap.R")
import_data()
data_name <- gsub("[ ]","_",name())
start <- 1
stop <- nsamples()
vid_name <- paste(data_name,"heatmapfreq",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_heatmapfreq(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
vid_name <- paste(data_name,"heatmapvolt",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_heatmapvolt(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
vid_name <- paste(data_name,"heatmapangle",start,"to",stop,sep = "_")
saveVideo({
for (t in start:stop) {
suppressWarnings(print(plot_heatmapangle(t)))
ani.options(interval = 0.033)
}
},video.name = paste(vid_name,".mp4",sep = ""))
}
#make_bar_videos("data/import_ponderosa.R")
make_map_videos("data/import_ponderosa.R")
make_heat_videos("data/import_ponderosa.R")
make_hist_videos("data/import_quake1.R")
#make_bar_videos("data/import_quake1.R")
make_map_videos("data/import_quake1.R")
make_heat_videos("data/import_quake1.R")
make_hist_videos("data/import_quake2.R")
#make_bar_videos("data/import_quake2.R")
make_map_videos("data/import_quake2.R")
nsamples()
get_voltdiff <- function(time){
xt <- Volt[time,-1]
xt1 <- ifelse(time == 1, Volt[1,-1], Volt[time-1,-1])
numerator <- ifelse((xt-1)==0,xt,(xt-1))
d <- (xt-xt1)/numerator
d
}
get_voltdiff(1)
get_voltdiff(2)
Dv <- as.matrix(Volt[,-1])
get_voltdiff <- function(time){
xt <- Volt[time,-1]
xt1 <- ifelse(time == 1, Volt[1,-1], Volt[time-1,-1])
numerator <- ifelse((xt-1)==0,xt,(xt-1))
Dv[time,-1] <<- (xt-xt1)/numerator
}
get_voltdiff(1)
length(Dv[1,-1])
get_voltdiff <- function(time){
xt <- Volt[time,-1]
xt1 <- ifelse(time == 1, Volt[1,-1], Volt[time-1,-1])
numerator <- ifelse((xt-1)==0,xt,(xt-1))
length((xt-xt1)/numerator)
Dv[time,-1] <<- (xt-xt1)/numerator
}
get_voltdiff(1)
get_voltdiff <- function(time){
xt <- Volt[time,-1]
xt1 <- ifelse(time == 1, Volt[1,-1], Volt[time-1,-1])
numerator <- ifelse((xt-1)==0,xt,(xt-1))
length((xt-xt1)/numerator)
#Dv[time,-1] <<- (xt-xt1)/numerator
}
get_voltdiff <- function(time){
xt <- Volt[time,-1]
xt1 <- ifelse(time == 1, Volt[1,-1], Volt[time-1,-1])
numerator <- ifelse((xt-1)==0,xt,(xt-1))
print(length((xt-xt1)/numerator))
#Dv[time,-1] <<- (xt-xt1)/numerator
}
get_voltdiff(1)
get_voltdiff <- function(time){
xt <- Volt[time,-1]
xt1 <- ifelse(time == 1, Volt[1,-1], Volt[time-1,-1])
numerator <- ifelse((xt-1)==0,xt,(xt-1))
print(length((xt-xt1)/numerator))
print(length(Dv[time,-1]))
#Dv[time,-1] <<- (xt-xt1)/numerator
}
get_voltdiff(1)
get_voltdiff <- function(time){
xt <- Volt[time,-1]
xt1 <- ifelse(time == 1, Volt[1,-1], Volt[time-1,-1])
numerator <- ifelse((xt-1)==0,xt,(xt-1))
print((xt-xt1)/numerator)
print(Dv[time,-1])
#Dv[time,-1] <<- (xt-xt1)/numerator
}
get_voltdiff(1)
get_voltdiff <- function(time){
xt <- Volt[time,-1]
xt1 <- ifelse(time == 1, Volt[1,-1], Volt[time-1,-1])
numerator <- ifelse((xt-1)==0,xt,(xt-1))
print(((xt-xt1)/numerator)[1])
print(Dv[time,-1][1])
#Dv[time,-1] <<- (xt-xt1)/numerator
}
get_voltdiff(1)
View(Volt)
View(Dv)
get_voltdiff <- function(time){
xt <- Volt[time,-1]
xt1 <- ifelse(time == 1, Volt[1,-1], Volt[time-1,-1])
numerator <- ifelse((xt-1)==0,xt,(xt-1))
#print(((xt-xt1)/numerator)[1])
# print(Dv[time,-1][1])
Dv[time,] <<- (xt-xt1)/numerator
}
get_voltdiff(1)
get_voltdiff(2)
Cv <- Volt[1:2,]
View(Cv)
Cv <- Volt[1:2,-1]
View(Cv)
Cv <- Volt[1,-1]
get_voltdiff <- function(time){
xt <- Dv[time,]
xt1 <- ifelse(time == 1, Dv[1,], Dv[time-1,])
numerator <- ifelse((xt-1)==0,xt,(xt-1))
#print(((xt-xt1)/numerator)[1])
# print(Dv[time,-1][1])
Cv[time,] <<- (xt-xt1)/numerator
}
get_voltdiff(1)
Dv <- as.matrix(Volt[,-1])
get_voltdiff(1)
View(Cv)
get_voltdiff(2)
get_voltdiff(3)
View(Cv)
get_voltdiff(4)
for (n in 5:20) {
get_voltdiff(n)
}
View(Cv)
for (n in 20:1000) {
get_voltdiff(n)
}
View(Cv)
plot(Cv)
NROW(Cv)
